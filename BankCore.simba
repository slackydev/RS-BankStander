{$include_once SRL/OSR.simba}
{$H-}

const
  BANK_NORTH = 0;
  BANK_EAST  = 1;
  BANK_SOUTH = 2;
  BANK_WEST  = 3;

type
  TArgz = array [0..15] of Variant;

  EOpCode = (
    opNone,
    opMouseAhead,        // not implemented
    opMouseEst,          // ..
    opMouseEstRad,

    opOpenTab,           // Argz: EGametab
    opClickInv,          // Argz: slot, mouse button
    opUseInv,            // not implemented

    opClickChatButton,   // Argz: ButtonID, Mouse button
    opClickBankButton,   // Argz: ButtonID
    opClickSpell,        // Argz: SpellID
    opClickItem,         // Argz: DTM, Mouse button
    opClickFirstItem,    // Argz: DTM, Mouse button

    opOpenBank,          // Argz: Direction
    opCloseBank,         // Argz: None
    opWithdrawIndex,     // Argz: Slot, Amount, Name
    opDepositIndex,      // Argz: Slot, ALL?
    opWithdrawItem,      // Argz: DTM, Amount, Name
    opDepositItem,       // Argz: DTM, ALL?

    opContextMenu,       // Argz: String

    opAwaitTab,          // Argz: Int32(Gametab)
    opAwaitCount,        // Argz: DTM, Int32(comparator), Count, Time
    opAwaitItem,         // Argz: Slot
    opAwaitNoItem,       // Argz: Slot

    opWaitLeft,          // Argz: Min, Max: Int32
    opWait,              // Argz: Avg Wait time: Int32
    opWaitTick,          // Argz: None

  // ops that uses the stack
    opDiscardTop,

    opPushIsUptext,
    opPushValue,
    opPushCountItem,
    opPushHasItem,
    opPushBankHasItem,
    opPushBankSlotOf,

    opPopClickItem,
    opPopWithdraw,
    opPopDeposit,

    opPopJT,
    opPopJF,

    opJLT,
    opJGT,
    opJEQ,
    opJNE,

    opPopJLT,
    opPopJGT,
    opPopJEQ,
    opPopJNE,

    opPopRetIf,
    opPopRetIfn,

  // misc
    opJMP,
    opRestart,
    opReturn
  );

  TVarStack = array of Variant;

  TInstruction = record
    Code: EOpCode;
    Argz: TArgz;
  end;

  TBankBot = record
    Instructions: array of TInstruction;
    State: Int32;
  end;


var
  Banker: TBankBot;

const
  NO_ARGZ: TArgz = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];



function TVarStack.Top(): Variant;
begin
  Result := Self[High(Self)];
end;

function TVarStack.Pop(): Variant;
begin
  Result := Self[High(Self)];
  SetLength(Self, High(Self));
end;

function TVarStack.Push(x: Variant): Variant;
begin
  SetLength(Self, Length(Self)+1);
  Self[High(Self)] := X;
  Result := X;
end;



var START_TIME: Int64 := GetTickCount64();
function GetTimeRunning(): LongWord; override;
begin
  Result := GetTickCount64() - START_TIME;
end;


procedure TMouse.Move(P: TPoint); override;
var
  dist: Double;
  q: TPoint;
  maxSpeed := Random(19,24);
  minSpeed := Random(5,6);
begin
  q := Self.GetPosition;
  dist := Hypot(q.x-p.x, q.y-p.y);
  self.Speed := Trunc(minSpeed + (maxSpeed-minSpeed) * Sqrt(dist / 1000));
  inherited;
end;


function Argz(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15: Variant=0): TArgz;
begin
  Result := [v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15];
end;



procedure TbankBot.AddInstr(OpCode: EOpCode; Argz:TArgz = NO_ARGZ);
begin
  Self.Instructions += TInstruction([OpCode, Argz]);
end;

procedure TBankBot.Execute();
var
  i: Int32;
  ins: TInstruction;

  function OpenBankDir(Dir: Int32): Boolean;
  var rect: TRectangle;
  begin
    case Dir of
      BANK_NORTH: rect := Minimap.StaticToMsRect(Minimap.GetMiddle + Point( 0,-4), 4);
      BANK_EAST:  rect := Minimap.StaticToMsRect(Minimap.GetMiddle + Point( 4, 0), 4);
      BANK_SOUTH: rect := Minimap.StaticToMsRect(Minimap.GetMiddle + Point( 0, 4), 4);
      BANK_WEST:  rect := Minimap.StaticToMsRect(Minimap.GetMiddle + Point(-4, 0), 4);
    end;
    Result := BankScreen.OpenAt(srl.rowp(Mouse.GetPosition, rect.Expand(-3)));
  end;

  function AwaitInvCount(DTM: Int32; Cmp: TComparator; Count, Time: Int32): Boolean;
  var t: TCountDown;
  begin
    t.Init(Time);
    while (not t.IsFinished) and (not Result) do
    begin
      case CMP of
        __LT__: Result := ((DTM >= 0) and (Inventory.Count(DTM) <  Count)) or ((DTM = -1) and (Inventory.Count() <  Count));
        __GT__: Result := ((DTM >= 0) and (Inventory.Count(DTM) >  Count)) or ((DTM = -1) and (Inventory.Count() >  Count));
        __EQ__: Result := ((DTM >= 0) and (Inventory.Count(DTM) =  Count)) or ((DTM = -1) and (Inventory.Count() =  Count));
        __NE__: Result := ((DTM >= 0) and (Inventory.Count(DTM) <> Count)) or ((DTM = -1) and (Inventory.Count() <> Count));
      end;
      Wait(30,70);
    end;
  end;

  function LocBetween(p: TPoint; qb: TBox; Length: Double = 1.0): TBox;
  var
    r: Double;
    q: TPoint;
  begin
    r := SRL.SkewedRand(Length, 0, 1.1);
    q := SRL.RandomPointEx(p, qb);
    q := Point(Round(p.X+(q.X-p.X)*r), Round(p.Y+(q.Y-p.Y)*r));
    Result := Box(
      Round(q.x-(qb.width div 2)*r), Round(q.y-(qb.height div 2)*r),
      Round(q.x+(qb.width div 2)*r), Round(q.y+(qb.height div 2)*r)
    );
  end;

  procedure MouseEst(B: TBox; Length: Double=1.0);
  begin
    Mouse.Move(LocBetween(Mouse.GetPosition, B, Length));
  end;

  procedure MouseEstRad(P: TPoint; Rad: Int32; Length: Double);
  begin
    Mouse.Move(LocBetween(Mouse.GetPosition, Box(P, Rad, Rad), Length));
  end;

  procedure MouseAhead(pos: Int32);
  var
    ins: TInstruction;
    tmp: TIntArray;
  begin
    Ins := Self.Instructions[Self.State+pos];

    case Ins.Code of
      opClickInv:        MouseEst(Inventory.FSlots[Int32(Ins.Argz[0])]);
      opClickChatButton: MouseEst(Chatbox.GetButtonIdBounds(Int32(Ins.Argz[0])));
      opClickBankButton: MouseEst(BankScreen.FButtons[Int32(Ins.Argz[0])]);
      opClickSpell:      MouseEst(Spells.FSlots[Int32(Ins.Argz[0])]);
      opWithdrawIndex:   MouseEst(BankScreen.FSlots[Int32(Ins.Argz[0])]);
      opDepositIndex:    MouseEst(Inventory.FSlots[Int32(Ins.Argz[0])]);
      opWithdrawItem:    MouseEst(BankScreen.FSlots[BankScreen.FindItem(Ins.Argz[0])]);
      opDepositItem, opClickItem:
        if Length(tmp := Inventory.FindItem(Ins.Argz[0])) <> 0 then
          MouseEst(Inventory.FSlots[tmp[0]]);
    end;
  end;

  function ClickFirstItem(ItemDTM: Integer; Button: Int32; Forced: Boolean): Boolean;
  var
    a: TIntArray;
  begin
    a := Inventory.FindItem(ItemDTM);
    if Length(a) = 0 then Exit(False);
    Result := True;
    a.SortFrom(Inventory.PointToSlot(Mouse.GetPosition));
    Mouse.Click(Inventory.FSlots[a[0]], Button, Forced);
  end;

var
  CountDown: TCountDown;
  Stack: TVarStack;
  tmp: Variant;
begin
  WriteLn('Executing ...');

  while SRL.isLoggedIn do
  begin
    Ins := Self.Instructions[Self.State];
    WriteLn(Self.State, ': ', Ins.Code, ' | Stack size: ', Length(Stack));
    Inc(Self.State);

    case Ins.Code of
      opMouseAhead: MouseAhead(Ins.Argz[0]);
      opMouseEst:   MouseEst(Box(Ins.Argz[0],Ins.Argz[1],Ins.Argz[2],Ins.Argz[3]),Ins.Argz[4]);
      opMouseEstRad:MouseEstRad(Point(Ins.Argz[0],Ins.Argz[1]),Ins.Argz[4],Ins.Argz[4]);

      opOpenTab:
        begin
          if not Gametabs.IsOpen(EGameTab(Int32(Ins.Argz[0])), 1) then
            Gametabs.Open(EGameTab(Int32(Ins.Argz[0])));
        end;

      opClickInv:
        begin
          Mouse.Click(Inventory.FSlots[Int32(Ins.Argz[0])], Ins.Argz[1], Random() < Ins.Argz[2]);
        end;

      opClickItem:
        begin
          Mouse.Click(Inventory.FSlots[Inventory.FindItem(Ins.Argz[0])[0]], Ins.Argz[1], Random() < Ins.Argz[2]);
        end;

      opClickFirstItem:
        begin
          ClickFirstItem(Ins.Argz[0], Ins.Argz[1], Random() < Ins.Argz[2]);
        end;

      opClickChatButton:
        begin
          Chatbox.ClickButtonId(Ins.Argz[0], Ins.Argz[1], '', Random(3000,4500));
        end;

      opClickBankButton:
        begin
          if not BankScreen.IsOpen(Random(5000,7000)) then Break();
          BankScreen.ClickButton(EBankButton(Int32(Ins.Argz[0])));
        end;

      opClickSpell:
        begin
          Spells.Cast(ESpellCast(Int32(Ins.Argz[0])), rndSkewed);
        end;

      opOpenBank:
        begin
          if not OpenBankDir(Ins.Argz[0]) then Break();
        end;

      opCloseBank:
        begin
          Bankscreen.Close();
        end;

      opWithdrawIndex:
        begin
          if not BankScreen.IsOpen(Random(5000,7000)) then Break();
          if not BankScreen.Withdraw(Ins.Argz[0], Ins.Argz[1], [String(Ins.Argz[2])]) then Break;
        end;

      opDepositIndex:
        begin
          if not BankScreen.IsOpen(Random(5000,7000)) then Break();
          if not BankScreen.DepositItem(Ins.Argz[0], Boolean(Ins.Argz[1])) then Break;
        end;

      opWithdrawItem:
        begin
          if not BankScreen.IsOpen(Random(5000,7000)) then Break();
          if not BankScreen.Withdraw(BankScreen.FindItem(Ins.Argz[0]), Ins.Argz[1], [String(Ins.Argz[2])]) then Break;
        end;

      opDepositItem:
        begin
          if not BankScreen.IsOpen(Random(5000,7000)) then Break();
          if not BankScreen.DepositItem(Inventory.FindItem(Ins.Argz[0])[0], Boolean(Ins.Argz[1])) then Break;
        end;

      opContextMenu:
        begin
          ChooseOption.Select(Ins.Argz[0]);
        end;

      opAwaitCount:
        begin
          if not AwaitInvCount(Ins.Argz[0], TComparator(Int32(Ins.Argz[1])), Ins.Argz[2], Ins.Argz[3]) then
            Break;
        end;

      opAwaitItem:
        begin
          CountDown.Init(Max(4000,Ins.Argz[1]));
          while (not CountDown.IsFinished()) and (not Inventory.IsSlotUsed(Ins.Argz[0])) do
            Wait(40,70);
        end;

      opAwaitNoItem:
        begin
          CountDown.Init(Max(4000,Ins.Argz[1]));
          while (not CountDown.IsFinished()) and (Inventory.IsSlotUsed(Ins.Argz[0])) do
            Wait(40,70);
        end;

      opAwaitTab:
        begin
          if (not Gametabs.IsOpen(EGametab(Int32(Ins.Argz[0])), Ins.Argz[1])) then
            Gametabs.Open(EGametab(Int32(Ins.Argz[0])));
        end;

      opWaitLeft: Wait(Ins.Argz[0], Ins.Argz[1], wdLeft);
      opWait:     WaitEx(Ins.Argz[0], Ins.Argz[0]*0.33);
      opWaitTick: Wait(600);

    // uses stack
      opDiscardTop:      Stack.Pop();

      opPushIsUptext:    Stack.Push(MainScreen.IsUpText(Ins.Argz[0]));
      opPushValue:       Stack.Push(Ins.Argz[0]);
      opPushCountItem:   Stack.Push(Inventory.Count(Ins.Argz[0]));
      opPushHasItem:     Stack.Push(Inventory.Count(Ins.Argz[0]) <> 0);
      opPushBankHasItem: Stack.Push(BankScreen.FindItem(Ins.Argz[0]) <> -1);
      opPushBankSlotOf:  Stack.Push(BankScreen.FindItem(Ins.Argz[0]));

      opPopClickItem:
        begin
          tmp := Stack.Pop();
          if Stack.Push(tmp <> -1) then
            Inventory.MouseSlot(tmp, Ins.Argz[1]);
        end;

      opPopWithdraw: Stack.Push(BankScreen.IsOpen(Random(5000,7000)) and BankScreen.Withdraw(Stack.Pop(), Ins.Argz[0], [String(Ins.Argz[1])]));
      opPopDeposit:  Stack.Push(BankScreen.IsOpen(Random(5000,7000)) and BankScreen.DepositItem(Stack.Pop(), Ins.Argz[0]));

      opJLT: if Stack.Top() <  Ins.Argz[0] then Self.State += Ins.Argz[1];
      opJGT: if Stack.Top() >  Ins.Argz[0] then Self.State += Ins.Argz[1];
      opJEQ: if Stack.Top() =  Ins.Argz[0] then Self.State += Ins.Argz[1];
      opJNE: if Stack.Top() <> Ins.Argz[0] then Self.State += Ins.Argz[1];

      opPopJT: if     Boolean(Stack.Pop()) then Self.State := Ins.Argz[0];
      opPopJF: if not Boolean(Stack.Pop()) then Self.State := Ins.Argz[0];
      opPopJLT: if Stack.Pop() <  Ins.Argz[0] then Self.State += Ins.Argz[1];
      opPopJGT: if Stack.Pop() >  Ins.Argz[0] then Self.State += Ins.Argz[1];
      opPopJEQ: if Stack.Pop() =  Ins.Argz[0] then Self.State += Ins.Argz[1];
      opPopJNE: if Stack.Pop() <> Ins.Argz[0] then Self.State += Ins.Argz[1];


      opPopRetIf: if     Boolean(Stack.Pop()) then Break;
      opPopRetIfn:if not Boolean(Stack.Pop()) then Break;

    // finally
      opJMP: Self.State := Ins.Argz[0];
      opRestart: Self.State := 0;
      opReturn: Break;
    end;

    Wait(Round(srl.SkewedRand(80,45,450)));
  end;
end;
